#!/usr/bin/env python3
"""
Instagram Appeal Flow - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
"""

import requests
import time
import random
import base64
import os
import threading
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import pyotp
from appeal_config import *

class InstagramAppealFlow:
    def __init__(self, driver, profile_id):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Appeal Flow
        
        Args:
            driver: Selenium WebDriver
            profile_id: ID –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –∞–ø–µ–ª—è—Ü—ñ—ó
        """
        self.driver = driver
        self.profile_id = profile_id
        self.thread_lock = threading.Lock()
        self.appeal_status = "APPEAL_STARTED"
        
    def log(self, message):
        """Thread-safe –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
        with self.thread_lock:
            print(f"üîÑ [Profile {self.profile_id}] {message}")
    
    def solve_captcha(self, captcha_image_path=None):
        """
        –†–æ–∑–≤'—è–∑–∞–Ω–Ω—è reCAPTCHA v2 —á–µ—Ä–µ–∑ 2captcha API
        
        Args:
            captcha_image_path: –®–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞–ø—á—ñ (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è reCAPTCHA v2)
            
        Returns:
            bool: True —è–∫—â–æ –∫–∞–ø—á—É —Ä–æ–∑–≤'—è–∑–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ
        """
        try:
            self.log("üîê –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è reCAPTCHA v2...")
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ site key –¥–ª—è reCAPTCHA
            site_key = self.find_recaptcha_site_key()
            if not site_key:
                self.log("‚ùå Site key –¥–ª—è reCAPTCHA –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            self.log(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ site key: {site_key}")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π URL
            page_url = self.driver.current_url
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ reCAPTCHA –Ω–∞ 2captcha
            submit_url = f"{TWOCAPTCHA_API_URL}/in.php"
            submit_data = {
                'method': 'userrecaptcha',
                'key': TWOCAPTCHA_API_KEY,
                'googlekey': site_key,
                'pageurl': page_url,
                'json': 1
            }
            
            self.log("üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ reCAPTCHA –Ω–∞ 2captcha...")
            response = requests.post(submit_url, data=submit_data, timeout=30)
            
            if response.status_code != 200:
                self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ reCAPTCHA: HTTP {response.status_code}")
                return False
            
            result = response.json()
            
            if result.get('status') != 1:
                self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ reCAPTCHA: {result.get('error_text', 'Unknown error')}")
                return False
            
            captcha_id = result.get('request')
            self.log(f"‚úÖ reCAPTCHA –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: {captcha_id}")
            
            # –û—á—ñ–∫—É—î–º–æ —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è
            self.log("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è reCAPTCHA...")
            start_time = time.time()
            
            while time.time() - start_time < APPEAL_SETTINGS['captcha_timeout']:
                check_url = f"{TWOCAPTCHA_API_URL}/res.php"
                check_params = {
                    'key': TWOCAPTCHA_API_KEY,
                    'action': 'get',
                    'id': captcha_id,
                    'json': 1
                }
                
                response = requests.get(check_url, params=check_params, timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    
                    if result.get('status') == 1:
                        captcha_token = result.get('request')
                        self.log(f"‚úÖ reCAPTCHA —Ä–æ–∑–≤'—è–∑–∞–Ω–æ, —Ç–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ")
                        
                        # –í–≤–æ–¥–∏–º–æ —Ç–æ–∫–µ–Ω —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–ª–µ
                        return self.submit_recaptcha_token(captcha_token)
                        
                    elif result.get('error_text') == 'CAPCHA_NOT_READY':
                        self.log("‚è≥ reCAPTCHA —â–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è...")
                        time.sleep(10)  # –ß–µ–∫–∞—î–º–æ 10 —Å–µ–∫—É–Ω–¥
                        continue
                    else:
                        self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è reCAPTCHA: {result.get('error_text', 'Unknown error')}")
                        return False
                
                time.sleep(10)
            
            self.log("‚è∞ –¢–∞–π–º–∞—É—Ç —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è reCAPTCHA")
            return False
            
        except Exception as e:
            self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è reCAPTCHA: {e}")
            return False
    
    def find_recaptcha_site_key(self):
        """
        –ó–Ω–∞–π—Ç–∏ site key –¥–ª—è reCAPTCHA –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        
        Returns:
            str: Site key –∞–±–æ None —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        """
        try:
            # –®—É–∫–∞—î–º–æ data-sitekey –∞—Ç—Ä–∏–±—É—Ç
            site_key_selectors = [
                "div[data-sitekey]",
                ".g-recaptcha[data-sitekey]",
                "#g-recaptcha[data-sitekey]"
            ]
            
            for selector in site_key_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        site_key = element.get_attribute('data-sitekey')
                        if site_key:
                            return site_key
                except:
                    continue
            
            # –®—É–∫–∞—î–º–æ –≤ iframe
            try:
                iframes = self.driver.find_elements(By.TAG_NAME, "iframe")
                for iframe in iframes:
                    src = iframe.get_attribute('src')
                    if src and 'recaptcha' in src:
                        # –ü–∞—Ä—Å–∏–º–æ site key –∑ URL
                        import re
                        match = re.search(r'k=([^&]+)', src)
                        if match:
                            return match.group(1)
            except:
                pass
            
            return None
            
        except Exception as e:
            self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É site key: {e}")
            return None
    
    def submit_recaptcha_token(self, token):
        """
        –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω reCAPTCHA —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–ª–µ
        
        Args:
            token: –¢–æ–∫–µ–Ω —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è reCAPTCHA
            
        Returns:
            bool: True —è–∫—â–æ —Ç–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –≤–≤–µ–¥–µ–Ω–æ
        """
        try:
            # –®—É–∫–∞—î–º–æ –ø–æ–ª–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
            token_selectors = [
                "textarea[name='g-recaptcha-response']",
                "textarea[id='g-recaptcha-response']",
                ".g-recaptcha-response",
                "textarea[data-sitekey]"
            ]
            
            token_field = None
            for selector in token_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        if element.is_displayed():
                            token_field = element
                            break
                    if token_field:
                        break
                except:
                    continue
            
            if not token_field:
                self.log("‚ùå –ü–æ–ª–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ reCAPTCHA –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –í–≤–æ–¥–∏–º–æ —Ç–æ–∫–µ–Ω
            self.driver.execute_script(f"arguments[0].innerHTML = '{token}';", token_field)
            self.log("‚úÖ –¢–æ–∫–µ–Ω reCAPTCHA –≤–≤–µ–¥–µ–Ω–æ")
            
            # –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É Next/Submit
            next_selectors = [
                "button[type='submit']",
                "input[type='submit']",
                "button:contains('Next')",
                "button:contains('Continue')",
                "button:contains('Submit')"
            ]
            
            for selector in next_selectors:
                try:
                    if ':contains(' in selector:
                        # XPath –¥–ª—è contains
                        xpath = f"//button[contains(text(), '{selector.split(':contains(')[1].split(')')[0]}')]"
                        elements = self.driver.find_elements(By.XPATH, xpath)
                    else:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    
                    for element in elements:
                        if element.is_displayed():
                            element.click()
                            self.log("‚úÖ –ö–Ω–æ–ø–∫–∞ Next –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞")
                            time.sleep(3)
                            return True
                except:
                    continue
            
            self.log("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ Next –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –∞–ª–µ —Ç–æ–∫–µ–Ω –≤–≤–µ–¥–µ–Ω–æ")
            return True
            
        except Exception as e:
            self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    
    def find_captcha_image(self):
        """
        –ó–Ω–∞–π—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞–ø—á—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —Ç–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –π–æ–≥–æ
        
        Returns:
            str: –®–ª—è—Ö –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ None
        """
        try:
            self.log("üîç –ü–æ—à—É–∫ –∫–∞–ø—á—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ...")
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä–∏ –¥–ª—è –∫–∞–ø—á—ñ
            captcha_selectors = [
                "img[src*='captcha']",
                "img[alt*='captcha']",
                "img[alt*='verification']",
                ".captcha img",
                "#captcha img",
                "img[src*='recaptcha']"
            ]
            
            captcha_element = None
            for selector in captcha_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        if element.is_displayed():
                            captcha_element = element
                            break
                    if captcha_element:
                        break
                except:
                    continue
            
            if not captcha_element:
                self.log("‚ùå –ö–∞–ø—á—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ")
                return None
            
            # –û—Ç—Ä–∏–º—É—î–º–æ URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            captcha_url = captcha_element.get_attribute('src')
            if not captcha_url:
                self.log("‚ùå URL –∫–∞–ø—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return None
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            self.log("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞–ø—á—ñ...")
            response = requests.get(captcha_url, timeout=30)
            
            if response.status_code != 200:
                self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞–ø—á—ñ: HTTP {response.status_code}")
                return None
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            captcha_path = f"captcha_{self.profile_id}_{int(time.time())}.png"
            with open(captcha_path, 'wb') as f:
                f.write(response.content)
            
            self.log(f"‚úÖ –ö–∞–ø—á—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {captcha_path}")
            return captcha_path
            
        except Exception as e:
            self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–∞–ø—á—ñ: {e}")
            return None
    
    def get_sms_number(self, service_name="ig"):
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è SMS –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ daisysms
        
        Args:
            service_name: –ö–æ–¥ —Å–µ—Ä–≤—ñ—Å—É –¥–ª—è —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω –Ω–æ–º–µ—Ä (ig = Instagram)
            
        Returns:
            dict: {'number': str, 'id': str} –∞–±–æ None —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è
        """
        try:
            self.log("üì± –ó–∞–ø–∏—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è SMS...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º
            test_mode = APPEAL_SETTINGS.get('test_mode', False) or os.environ.get('APPEAL_TEST_MODE', 'false').lower() == 'true'
            
            if test_mode:
                self.log("üß™ –¢–ï–°–¢–û–í–ò–ô –†–ï–ñ–ò–ú: –°–∏–º—É–ª—è—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞")
                return {
                    'number': '1234567890',
                    'id': 'test_number_id'
                }
            
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å
            balance = self.check_sms_balance()
            if balance is not None:
                self.log(f"üí∞ DaisySMS –±–∞–ª–∞–Ω—Å: ${balance}")
                if balance < 0.50:  # –Ø–∫—â–æ –±–∞–ª–∞–Ω—Å –º–µ–Ω—à–µ $0.50
                    self.log("‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π –±–∞–ª–∞–Ω—Å DaisySMS! –ú–æ–∂–µ –Ω–µ –≤–∏—Å—Ç–∞—á–∏—Ç–∏ –¥–ª—è SMS")
            
            # –ó–∞–ø–∏—Ç—É—î–º–æ –Ω–æ–º–µ—Ä –∑–≥—ñ–¥–Ω–æ –∑ API daisysms
            get_number_url = f"{DAISYSMS_API_URL}"
            params = {
                'api_key': DAISYSMS_API_KEY,
                'action': 'getNumber',
                'service': service_name,  # ig –¥–ª—è Instagram
                'max_price': '1.00'  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ $1.00
            }
            
            response = requests.get(get_number_url, params=params, timeout=30)
            
            if response.status_code != 200:
                self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–æ–º–µ—Ä–∞: HTTP {response.status_code}")
                return None
            
            result = response.text.strip()
            self.log(f"üìä –í—ñ–¥–ø–æ–≤—ñ–¥—å API: {result}")
            
            if result.startswith('ACCESS_NUMBER'):
                # –§–æ—Ä–º–∞—Ç: ACCESS_NUMBER:ID:NUMBER
                parts = result.split(':')
                if len(parts) >= 3:
                    number_id = parts[1]
                    phone_number = parts[2]
                    
                    self.log(f"‚úÖ –ù–æ–º–µ—Ä –æ—Ç—Ä–∏–º–∞–Ω–æ: {phone_number} (ID: {number_id})")
                    return {
                        'number': phone_number,
                        'id': number_id
                    }
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—à—ñ –º–æ–∂–ª–∏–≤—ñ –ø–æ–º–∏–ª–∫–∏
            if result == 'NO_NUMBERS':
                self.log("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤")
            elif result == 'NO_BALANCE':
                self.log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ")
            elif result == 'WRONG_SERVICE':
                self.log("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥ —Å–µ—Ä–≤—ñ—Å—É")
            else:
                self.log(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {result}")
            
            return None
            
        except Exception as e:
            self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–æ–º–µ—Ä–∞: {e}")
            return None
    
    def get_sms_code(self, number_id):
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ SMS –∫–æ–¥
        
        Args:
            number_id: ID –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            
        Returns:
            str: SMS –∫–æ–¥ –∞–±–æ None —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è
        """
        try:
            self.log(f"üì® –û—á—ñ–∫—É–≤–∞–Ω–Ω—è SMS –∫–æ–¥—É –¥–ª—è ID: {number_id}")
            
            start_time = time.time()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∞–±–æ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
            test_mode = APPEAL_SETTINGS.get('test_mode', False) or os.environ.get('APPEAL_TEST_MODE', 'false').lower() == 'true'
            test_code_received = False
            
            if test_mode:
                self.log("üß™ –¢–ï–°–¢–û–í–ò–ô –†–ï–ñ–ò–ú: –ë—É–¥–µ —Å–∏–º—É–ª—é–≤–∞—Ç–∏—Å—è SMS –∫–æ–¥")
            
            while time.time() - start_time < APPEAL_SETTINGS['sms_timeout']:
                # –¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º - —Å–∏–º—É–ª—é—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–¥—É
                if test_mode and time.time() - start_time > 30 and not test_code_received:
                    test_code = "123456"  # –¢–µ—Å—Ç–æ–≤–∏–π –∫–æ–¥
                    self.log(f"üß™ –¢–ï–°–¢–û–í–ò–ô –†–ï–ñ–ò–ú: –°–∏–º—É–ª—è—Ü—ñ—è SMS –∫–æ–¥—É: {test_code}")
                    return test_code
                
                check_url = f"{DAISYSMS_API_URL}"
                params = {
                    'api_key': DAISYSMS_API_KEY,
                    'action': 'getStatus',
                    'id': number_id
                }
                
                response = requests.get(check_url, params=params, timeout=30)
                
                if response.status_code == 200:
                    result = response.text.strip()
                    self.log(f"üìä –°—Ç–∞—Ç—É—Å SMS: {result}")
                    
                    if result.startswith('STATUS_OK:'):
                        # –§–æ—Ä–º–∞—Ç: STATUS_OK:CODE
                        code = result.split(':')[1]
                        self.log(f"‚úÖ SMS –∫–æ–¥ –æ—Ç—Ä–∏–º–∞–Ω–æ: {code}")
                        return code
                    elif result == 'STATUS_WAIT_CODE':
                        elapsed = int(time.time() - start_time)
                        remaining = int(APPEAL_SETTINGS['sms_timeout'] - elapsed)
                        self.log(f"‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è SMS –∫–æ–¥—É... ({elapsed}s –ø—Ä–æ–π—à–ª–æ, {remaining}s –∑–∞–ª–∏—à–∏–ª–æ—Å—å)")
                        time.sleep(5)  # –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥
                        continue
                    elif result == 'STATUS_CANCEL':
                        self.log("‚ùå SMS –∫–æ–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                        return None
                    elif result == 'STATUS_WAIT_RETRY':
                        self.log("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏...")
                        time.sleep(10)
                        continue
                    elif result == 'STATUS_BAD_ACTION':
                        self.log("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ—ó API")
                        return None
                    elif result == 'STATUS_BAD_SERVICE':
                        self.log("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤—ñ—Å—É")
                        return None
                    else:
                        self.log(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å SMS: {result}")
                        time.sleep(10)
                        continue
                else:
                    self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ HTTP: {response.status_code}")
                    time.sleep(10)
                    continue
            
            elapsed = int(time.time() - start_time)
            self.log(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è SMS –∫–æ–¥—É ({elapsed}s –ø—Ä–æ–π—à–ª–æ)")
            
            # –Ø–∫—â–æ —Ü–µ –Ω–µ —Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º, –¥–æ–¥–∞—î–º–æ –ø–æ—Ä–∞–¥—É
            if not test_mode:
                self.log("üí° –ü–æ—Ä–∞–¥–∏ –¥–ª—è SMS:")
                self.log("   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±–∞–ª–∞–Ω—Å DaisySMS")
                self.log("   - –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ –Ω–æ–º–µ—Ä –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è Instagram")
                self.log("   - –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –Ω–æ–º–µ—Ä –∞–±–æ —Å–µ—Ä–≤—ñ—Å")
            
            return None
            
        except Exception as e:
            self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è SMS –∫–æ–¥—É: {e}")
            return None
    
    def check_sms_balance(self):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å SMS —Å–µ—Ä–≤—ñ—Å—É
        
        Returns:
            float: –ë–∞–ª–∞–Ω—Å —É –¥–æ–ª–∞—Ä–∞—Ö –∞–±–æ None —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è
        """
        try:
            self.log("üí∞ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É SMS —Å–µ—Ä–≤—ñ—Å—É...")
            
            check_url = f"{DAISYSMS_API_URL}"
            params = {
                'api_key': DAISYSMS_API_KEY,
                'action': 'getBalance'
            }
            
            response = requests.get(check_url, params=params, timeout=30)
            
            if response.status_code == 200:
                result = response.text.strip()
                
                if result.startswith('ACCESS_BALANCE:'):
                    balance = float(result.split(':')[1])
                    self.log(f"‚úÖ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}")
                    return balance
                else:
                    self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {result}")
                    return None
            else:
                self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ HTTP: {response.status_code}")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å—É: {e}")
            return None
    
    def generate_2fa_code(self, secret_key):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è 2FA –∫–æ–¥—É
        
        Args:
            secret_key: –°–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –¥–ª—è TOTP
            
        Returns:
            str: 2FA –∫–æ–¥ –∞–±–æ None —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è
        """
        try:
            self.log("üîê –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è 2FA –∫–æ–¥—É...")
            
            if not secret_key or secret_key.strip() == '':
                self.log("‚ùå –°–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á 2FA –Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
                return None
            
            # –û—á–∏—â–∞—î–º–æ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á
            clean_secret = secret_key.replace(' ', '').upper()
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ TOTP –∫–æ–¥
            totp = pyotp.TOTP(clean_secret)
            current_code = totp.now()
            
            self.log(f"‚úÖ 2FA –∫–æ–¥ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {current_code}")
            return current_code
            
        except Exception as e:
            self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó 2FA –∫–æ–¥—É: {e}")
            return None
    
    def upload_selfie(self, selfie_path=None):
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è selfie –¥–ª—è –∞–ø–µ–ª—è—Ü—ñ—ó
        
        Args:
            selfie_path: –®–ª—è—Ö –¥–æ selfie —Ñ–∞–π–ª—É
            
        Returns:
            bool: True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
        """
        try:
            self.log("üì∏ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è selfie...")
            
            if not selfie_path:
                selfie_path = APPEAL_SETTINGS['selfie_path']
            
            if not os.path.exists(selfie_path):
                self.log(f"‚ùå –§–∞–π–ª selfie –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {selfie_path}")
                return False
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–ª–µ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
            file_input_selectors = [
                "input[type='file']",
                "input[accept*='image']",
                "input[name*='photo']",
                "input[name*='image']",
                "input[name*='selfie']"
            ]
            
            file_input = None
            for selector in file_input_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        if element.is_displayed():
                            file_input = element
                            break
                    if file_input:
                        break
                except:
                    continue
            
            if not file_input:
                self.log("‚ùå –ü–æ–ª–µ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
            absolute_path = os.path.abspath(selfie_path)
            file_input.send_keys(absolute_path)
            
            self.log(f"‚úÖ Selfie –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {selfie_path}")
            return True
            
        except Exception as e:
            self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è selfie: {e}")
            return False
    
    def handle_appeal_checkpoint(self, checkpoint_type, **kwargs):
        """
        –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —á–µ–∫–ø–æ—ñ–Ω—Ç—ñ–≤ –∞–ø–µ–ª—è—Ü—ñ—ó
        
        Args:
            checkpoint_type: –¢–∏–ø —á–µ–∫–ø–æ—ñ–Ω—Ç—É
            **kwargs: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            
        Returns:
            bool: True —è–∫—â–æ —á–µ–∫–ø–æ—ñ–Ω—Ç –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ
        """
        try:
            self.log(f"üîÑ –û–±—Ä–æ–±–∫–∞ —á–µ–∫–ø–æ—ñ–Ω—Ç—É: {checkpoint_type}")
            
            if checkpoint_type == "captcha":
                # –†–æ–∑–≤'—è–∑—É—î–º–æ –∫–∞–ø—á—É
                captcha_solution = self.solve_captcha()
                if captcha_solution:
                    # –í–≤–æ–¥–∏–º–æ —Ä—ñ—à–µ–Ω–Ω—è –∫–∞–ø—á—ñ
                    captcha_input = self.driver.find_element(By.CSS_SELECTOR, "input[name*='captcha']")
                    captcha_input.clear()
                    captcha_input.send_keys(captcha_solution)
                    
                    # –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                    submit_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
                    submit_button.click()
                    
                    time.sleep(3)
                    return True
                return False
            
            elif checkpoint_type == "email_confirmation":
                # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email
                email_input = self.driver.find_element(By.CSS_SELECTOR, "input[name*='email']")
                email_input.clear()
                email_input.send_keys(APPEAL_EMAIL)
                
                submit_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
                submit_button.click()
                
                time.sleep(3)
                return True
            
            elif checkpoint_type == "sms_verification":
                # SMS –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è
                sms_number_info = self.get_sms_number()
                if not sms_number_info:
                    return False
                
                phone_number = sms_number_info['number']
                self.log(f"üìû Got phone number: {phone_number}")
                
                # Find phone input field and enter number
                phone_input_selectors = [
                    "//input[@type='tel']",
                    "//input[contains(@placeholder, 'Phone')]",
                    "//input[contains(@placeholder, 'phone')]",
                    "//input[contains(@name, 'phone')]",
                    "//input[contains(@id, 'phone')]"
                ]
                
                phone_entered = False
                for selector in phone_input_selectors:
                    try:
                        phone_input = self.driver.find_element(By.XPATH, selector)
                        if phone_input and phone_input.is_displayed():
                            phone_input.clear()
                            phone_input.send_keys(phone_number)
                            self.log(f"‚úÖ Phone number entered: {phone_number}")
                            phone_entered = True
                            break
                    except:
                        continue
                
                if not phone_entered:
                    self.log("‚ùå Could not find phone input field")
                    return False
                
                # Find and click "Send code" button - search by text regardless of HTML structure
                # Instagram constantly changes their HTML structure, so we search by text content
                send_code_texts = [
                    "Send code",
                    "Send Code", 
                    "Send",
                    "Continue",
                    "Next",
                    "Submit"
                ]
                
                # Create selectors for any element containing these texts
                send_code_selectors = []
                for text in send_code_texts:
                    send_code_selectors.extend([
                        f"//*[contains(text(), '{text}')]",
                        f"//*[contains(normalize-space(text()), '{text}')]",
                        f"//*[text()='{text}']",
                        f"//*[normalize-space(text())='{text}']"
                    ])
                
                send_code_clicked = False
                for i, selector in enumerate(send_code_selectors):
                    try:
                        button = self.driver.find_element(By.XPATH, selector)
                        if button and button.is_displayed():
                            self.log(f"‚úÖ Found send button with selector {i+1}: {selector}")
                            
                            # –°–ø—Ä–æ–±—É—î–º–æ –∫–ª—ñ–∫–Ω—É—Ç–∏ –Ω–∞ —Å–∞–º –µ–ª–µ–º–µ–Ω—Ç
                            try:
                                button.click()
                                self.log("‚úÖ Send code button clicked")
                                send_code_clicked = True
                                time.sleep(5)  # Wait for SMS to be sent
                                break
                            except:
                                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∫–ª—ñ–∫–Ω—É—Ç–∏, —Å–ø—Ä–æ–±—É—î–º–æ –∫–ª—ñ–∫–Ω—É—Ç–∏ –Ω–∞ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –µ–ª–µ–º–µ–Ω—Ç
                                try:
                                    parent = button.find_element(By.XPATH, "..")
                                    if parent:
                                        self.log("üîÑ Trying to click parent element...")
                                        parent.click()
                                        self.log("‚úÖ Parent element clicked")
                                        send_code_clicked = True
                                        time.sleep(5)
                                        break
                                except:
                                    # –Ø–∫—â–æ —ñ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∫–ª—ñ–∫–∞—î—Ç—å—Å—è, —Å–ø—Ä–æ–±—É—î–º–æ JavaScript click
                                    try:
                                        self.driver.execute_script("arguments[0].click();", button)
                                        self.log("‚úÖ JavaScript click executed")
                                        send_code_clicked = True
                                        time.sleep(5)
                                        break
                                    except:
                                        self.log("‚ö†Ô∏è All click methods failed for this element")
                                        continue
                    except:
                        continue
                
                # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –∫–Ω–æ–ø–∫—É, —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ —Ç–µ–∫—Å—Ç–æ–º
                if not send_code_clicked:
                    self.log("üîç Searching for all clickable elements with text on page...")
                    try:
                        # –®—É–∫–∞—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                        all_elements = self.driver.find_elements(By.XPATH, "//*[text() or @value or @placeholder]")
                        self.log(f"üìã Found {len(all_elements)} elements with text/value/placeholder:")
                        
                        for i, element in enumerate(all_elements):
                            try:
                                if element.is_displayed():
                                    text = element.text.strip() if hasattr(element, 'text') and element.text else element.get_attribute('value') or element.get_attribute('placeholder') or 'no text'
                                    tag = element.tag_name
                                    classes = element.get_attribute('class') or 'no class'
                                    role = element.get_attribute('role') or 'no role'
                                    data_bloks = element.get_attribute('data-bloks-name') or 'no bloks'
                                    
                                    # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –∫–æ—Ä–∏—Å–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º
                                    if any(keyword in text.lower() for keyword in ['send', 'code', 'continue', 'next', 'submit', 'confirm', 'verify']):
                                        self.log(f"   Element {i+1}: <{tag}> '{text}' role='{role}' class='{classes[:50]}...' bloks='{data_bloks}'")
                            except:
                                continue
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è Error searching for elements: {e}")
                
                if not send_code_clicked:
                    self.log("‚ö†Ô∏è Send code button not found")
                    return False
                
                # Wait for SMS code and enter it
                self.log("üì® Waiting for SMS code...")
                sms_code = self.get_sms_code(sms_number_info['id'])
                
                if sms_code:
                    self.log(f"‚úÖ SMS code received: {sms_code}")
                    
                    # Find SMS code input field
                    code_input_selectors = [
                        "//input[@type='text']",
                        "//input[contains(@placeholder, 'code')]",
                        "//input[contains(@placeholder, 'Code')]",
                        "//input[contains(@name, 'code')]",
                        "//input[contains(@id, 'code')]"
                    ]
                    
                    code_entered = False
                    for selector in code_input_selectors:
                        try:
                            code_input = self.driver.find_element(By.XPATH, selector)
                            if code_input and code_input.is_displayed():
                                code_input.clear()
                                code_input.send_keys(sms_code)
                                self.log(f"‚úÖ SMS code entered: {sms_code}")
                                code_entered = True
                                break
                        except:
                            continue
                    
                    if not code_entered:
                        self.log("‚ùå Could not find SMS code input field")
                        return False
                    
                    # Find and click submit/confirm button
                    confirm_selectors = [
                        "//button[contains(text(), 'Confirm')]",
                        "//button[contains(text(), 'Verify')]",
                        "//button[contains(text(), 'Submit')]",
                        "//button[contains(text(), 'Next')]",
                        "//button[@type='submit']"
                    ]
                    
                    for selector in confirm_selectors:
                        try:
                            button = self.driver.find_element(By.XPATH, selector)
                            if button and button.is_displayed():
                                button.click()
                                self.log("‚úÖ SMS confirmation completed")
                                time.sleep(3)
                                return True
                        except:
                            continue
                    
                    self.log("‚ö†Ô∏è Confirm button not found, but SMS code entered")
                    return True
                else:
                    self.log("‚ùå SMS code not received")
                    return False
            
            elif checkpoint_type == "selfie_verification":
                # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è selfie
                return self.upload_selfie()
            
            elif checkpoint_type == "2fa_verification":
                # 2FA –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è
                secret_key = kwargs.get('secret_key', '')
                if not secret_key:
                    return False
                
                code = self.generate_2fa_code(secret_key)
                if code:
                    code_input = self.driver.find_element(By.CSS_SELECTOR, "input[name*='code']")
                    code_input.clear()
                    code_input.send_keys(code)
                    
                    submit_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
                    submit_button.click()
                    
                    time.sleep(3)
                    return True
                return False
            
            return False
            
        except Exception as e:
            self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —á–µ–∫–ø–æ—ñ–Ω—Ç—É {checkpoint_type}: {e}")
            return False
    
    def detect_appeal_checkpoint(self):
        """
        –î–µ—Ç–µ–∫—Ü—ñ—è —Ç–∏–ø—É —á–µ–∫–ø–æ—ñ–Ω—Ç—É –∞–ø–µ–ª—è—Ü—ñ—ó –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–∞—Ä–∞–ª–µ–ª—å–Ω—É –¥–µ—Ç–µ–∫—Ü—ñ—é –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫—É checkpoint'—ñ–≤
        
        Returns:
            str: –¢–∏–ø —á–µ–∫–ø–æ—ñ–Ω—Ç—É –∞–±–æ None —è–∫—â–æ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ
        """
        try:
            current_url = self.driver.current_url.lower()
            page_source = self.driver.page_source.lower()
            
            # –ü–ê–†–ê–õ–ï–õ–¨–ù–ê –î–ï–¢–ï–ö–¶–Ü–Ø - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –í–°–Ü checkpoint'–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
            # Instagram –º–æ–∂–µ –ø–æ–∫–∞–∑–∞—Ç–∏ –±—É–¥—å-—è–∫–∏–π checkpoint –≤ –±—É–¥—å-—è–∫–æ–º—É –ø–æ—Ä—è–¥–∫—É
            
            # Phone number confirmation checkpoint
            phone_indicators = [
                "enter your mobile number",
                "confirm this mobile number", 
                "send code",
                "phone number",
                "mobile number",
                "you'll need to confirm this mobile number",
                "sms or whatsapp",
                "via sms",
                "via whatsapp"
            ]
            
            # reCAPTCHA checkpoint
            captcha_indicators = [
                "help us confirm it's you",
                "i'm not a robot",
                "recaptcha",
                "verify you're human",
                "security check"
            ]
            
            # Human confirmation checkpoint
            human_confirm_indicators = [
                "confirm you're human",
                "confirm you are human",
                "verify you are human"
            ]
            
            # Email confirmation checkpoint
            email_indicators = [
                "enter your email",
                "confirm your email",
                "email address",
                "verify your email"
            ]
            
            # 2FA checkpoint
            twofa_indicators = [
                "enter authentication code",
                "two-factor authentication",
                "authenticator app",
                "security code",
                "verification code"
            ]
            
            # Selfie checkpoint
            selfie_indicators = [
                "take a photo",
                "upload a photo",
                "selfie",
                "verify your identity"
            ]
            
            # –î–µ—Ç–µ–∫—Ç—É—î–º–æ —è–∫–∏–π checkpoint –ø—Ä–∏—Å—É—Ç–Ω—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
            detected_checkpoints = []
            
            if any(indicator in page_source for indicator in phone_indicators):
                detected_checkpoints.append("sms_verification")
            
            if any(indicator in page_source for indicator in captcha_indicators):
                # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è reCAPTCHA - —à—É–∫–∞—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
                try:
                    recaptcha_selectors = [
                        "iframe[src*='recaptcha']",
                        "div[class*='recaptcha']", 
                        "div[id*='recaptcha']",
                        ".g-recaptcha",
                        "#g-recaptcha",
                        "div[data-sitekey]",
                        "iframe[src*='google.com/recaptcha']"
                    ]
                    
                    for selector in recaptcha_selectors:
                        try:
                            elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                            for element in elements:
                                if element.is_displayed():
                                    detected_checkpoints.append("captcha")
                                    break
                            if "captcha" in detected_checkpoints:
                                break
                        except:
                            continue
                except Exception as e:
                    self.log(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É reCAPTCHA: {e}")
                
            if any(indicator in page_source for indicator in human_confirm_indicators):
                detected_checkpoints.append("human_confirm")
                
            if any(indicator in page_source for indicator in email_indicators):
                detected_checkpoints.append("email_confirmation")
                
            if any(indicator in page_source for indicator in twofa_indicators):
                detected_checkpoints.append("2fa_verification")
                
            if any(indicator in page_source for indicator in selfie_indicators):
                detected_checkpoints.append("selfie_verification")
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–µ—Ä—à–∏–π –∑–Ω–∞–π–¥–µ–Ω–∏–π checkpoint
            if detected_checkpoints:
                checkpoint_type = detected_checkpoints[0]  # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –∑–Ω–∞–π–¥–µ–Ω–∏–π
                self.log(f"üéØ Detected checkpoint: {checkpoint_type} (available: {detected_checkpoints})")
                return checkpoint_type
            
            return None
            
        except Exception as e:
            self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ—Ç–µ–∫—Ü—ñ—ó —á–µ–∫–ø–æ—ñ–Ω—Ç—É: {e}")
            return None
    
    def run_appeal_flow(self, profile_info):
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ Appeal Flow
        
        Args:
            profile_info: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ—Ñ—ñ–ª—å (–≤–∫–ª—é—á–∞—î 2fa_secret)
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–ø–µ–ª—è—Ü—ñ—ó
        """
        try:
            self.log("üöÄ –ó–∞–ø—É—Å–∫ Appeal Flow...")
            self.appeal_status = "APPEAL_STARTED"
            
            max_attempts = APPEAL_SETTINGS['max_appeal_attempts']
            attempt = 0
            
            while attempt < max_attempts:
                attempt += 1
                self.log(f"üîÑ –°–ø—Ä–æ–±–∞ –∞–ø–µ–ª—è—Ü—ñ—ó {attempt}/{max_attempts}")
                
                # –î–µ—Ç–µ–∫—Ç—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–µ–∫–ø–æ—ñ–Ω—Ç
                checkpoint_type = self.detect_appeal_checkpoint()
                
                if not checkpoint_type:
                    self.log("‚úÖ –ê–ø–µ–ª—è—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
                    self.appeal_status = "APPEAL_SUCCESS"
                    return {
                        'success': True,
                        'status': 'APPEAL_SUCCESS',
                        'message': '–ê–ø–µ–ª—è—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
                    }
                
                self.log(f"üéØ –í–∏—è–≤–ª–µ–Ω–æ —á–µ–∫–ø–æ—ñ–Ω—Ç: {checkpoint_type}")
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ —á–µ–∫–ø–æ—ñ–Ω—Ç
                success = False
                
                if checkpoint_type == "2fa_verification":
                    success = self.handle_appeal_checkpoint(
                        checkpoint_type, 
                        secret_key=profile_info.get('2fa_secret', '')
                    )
                else:
                    success = self.handle_appeal_checkpoint(checkpoint_type)
                
                if success:
                    self.log(f"‚úÖ –ß–µ–∫–ø–æ—ñ–Ω—Ç {checkpoint_type} –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
                    time.sleep(2)
                else:
                    self.log(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —á–µ–∫–ø–æ—ñ–Ω—Ç {checkpoint_type}")
                    time.sleep(APPEAL_SETTINGS['retry_delay'])
            
            # –Ø–∫—â–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –Ω–µ–≤–¥–∞–ª—ñ
            self.log("‚ùå –ê–ø–µ–ª—è—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±")
            self.appeal_status = "APPEAL_FAILED"
            return {
                'success': False,
                'status': 'APPEAL_FAILED',
                'message': '–ê–ø–µ–ª—è—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±'
            }
            
        except Exception as e:
            self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Appeal Flow: {e}")
            self.appeal_status = "APPEAL_FAILED"
            return {
                'success': False,
                'status': 'APPEAL_FAILED',
                'message': f'–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}'
            }
